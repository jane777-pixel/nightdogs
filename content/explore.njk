---js
const eleventyNavigation = {
	key: "Explore",
	order: 2
};

// Pagination configuration for posts
const pagination = {
	data: "collections.posts",
	size: 12,
	alias: "posts",
	reverse: true
};
---

<style>
.explore-page {
  max-width: 1200px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.page-header {
  text-align: center;
  margin-bottom: 3rem;
}

.page-title {
  font-size: 3rem;
  margin: 0 0 1rem 0;
  color: var(--color);
}

.page-subtitle {
  font-size: 1.2rem;
  color: var(--muted-color);
  margin: 0 0 2rem 0;
}

.explore-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 1rem;
  margin-bottom: 3rem;
  max-width: 700px;
  margin-left: auto;
  margin-right: auto;
}

.explore-stat {
  text-align: center;
  padding: 1.5rem 1rem;
  background: var(--background-color);
  border: 2px solid var(--primary);
  border-radius: 12px;
  transition: all 0.2s ease;
}

.explore-stat:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.stat-number {
  display: block;
  font-size: 2.2rem;
  font-weight: bold;
  color: var(--primary);
  margin-bottom: 0.5rem;
}

.stat-label {
  font-size: 0.9rem;
  color: var(--color);
  margin: 0;
  font-weight: 500;
}

.section {
  margin-bottom: 4rem;
}

.section-title {
  font-size: 2rem;
  margin: 0 0 2rem 0;
  color: var(--color);
  text-align: center;
}

.section-subtitle {
  text-align: center;
  margin-bottom: 2rem;
  color: var(--muted-color);
  font-size: 1rem;
}

/* Archive Section Styles */
.archive-section {
  border-bottom: 2px solid var(--primary);
  padding-bottom: 3rem;
  margin-bottom: 4rem;
}

.filters-section {
  margin-bottom: 3rem;
  padding: 2rem;
  background: var(--background-color);
  border: 2px solid var(--primary);
  border-radius: 12px;
}

.filters-header {
  text-align: center;
  margin-bottom: 2rem;
}

.filters-header h3 {
  font-size: 1.5rem;
  margin: 0 0 0.5rem 0;
  color: var(--color);
}

.search-filter {
  margin-bottom: 2rem;
  text-align: center;
}

.search-input {
  width: 100%;
  max-width: 500px;
  padding: 0.75rem 1rem;
  border: 2px solid var(--primary);
  border-radius: 8px;
  background: var(--background-color);
  color: var(--color);
  font-size: 1rem;
  transition: all 0.2s ease;
}

.search-input:focus {
  outline: none;
  border-color: var(--color);
  box-shadow: 0 0 0 3px rgba(0,0,0,0.1);
}

.filter-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1.5rem;
}

.filter-group {
  text-align: center;
}

.filter-group h4 {
  font-size: 1.1rem;
  margin: 0 0 1rem 0;
  color: var(--color);
}

.filter-tags, .sort-options {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 0.5rem;
}

.filter-tag, .sort-option {
  padding: 0.4rem 0.8rem;
  border: 2px solid var(--primary);
  background: var(--background-color);
  color: var(--color);
  text-decoration: none;
  border-radius: 20px;
  font-size: 0.85rem;
  transition: all 0.2s ease;
  cursor: pointer;
  position: relative;
}

.filter-tag:hover {
  background: var(--primary);
  color: var(--background-color);
  text-decoration: none;
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.filter-tag.active {
  color: #ffffff;
  text-decoration: none;
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.sort-option:hover, .sort-option.active {
  background: var(--primary);
  color: var(--background-color);
  text-decoration: none;
}

.posts-section {
  margin-top: 3rem;
}

.posts-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.posts-count {
  font-size: 1.1rem;
  color: var(--muted-color);
}

.posts-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-bottom: 3rem;
}

.post-card {
  background: var(--background-color);
  border: 1px solid var(--primary);
  border-radius: 12px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  text-decoration: none;
  color: inherit;
}

.post-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 16px rgba(0,0,0,0.1);
  border-color: var(--color);
  text-decoration: none;
}

.post-card:hover * {
  color: inherit;
}

.post-card-header {
  margin-bottom: 1rem;
}

.post-card-title {
  font-size: 1.3rem;
  font-weight: bold;
  color: var(--color);
  margin: 0 0 0.5rem 0;
  line-height: 1.3;
}

.post-card-meta {
  font-size: 0.85rem;
  color: var(--muted-color);
  margin-bottom: 1rem;
}

.post-card-description {
  font-size: 0.9rem;
  line-height: 1.5;
  color: var(--color);
  opacity: 0.8;
  margin-bottom: 1rem;
}

.post-card-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.3rem;
}

.post-card-tag {
  padding: 0.2rem 0.5rem;
  color: #ffffff;
  text-decoration: none;
  border-radius: 10px;
  font-size: 0.75rem;
  font-weight: 500;
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
  margin-top: 3rem;
}

.pagination-link {
  padding: 0.75rem 1.5rem;
  background: var(--background-color);
  border: 2px solid var(--primary);
  color: var(--color);
  text-decoration: none;
  border-radius: 8px;
  transition: all 0.2s ease;
}

.pagination-link:hover {
  background: var(--primary);
  color: var(--background-color);
  text-decoration: none;
}

.pagination-link.current {
  background: var(--primary);
  color: var(--background-color);
}

.pagination-info {
  color: var(--muted-color);
  font-size: 0.9rem;
}



@media (max-width: 768px) {
  .explore-page {
    padding: 1rem;
  }

  .page-title {
    font-size: 2.5rem;
  }

  .explore-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .filter-options {
    grid-template-columns: 1fr;
  }

  .posts-header {
    flex-direction: column;
    align-items: stretch;
    text-align: center;
  }

  .posts-grid {
    grid-template-columns: 1fr;
  }



  .pagination {
    flex-wrap: wrap;
  }
}
</style>

<div class="explore-page">
  <div class="page-header">
    <h1 class="page-title">üîç Explore</h1>
    <p class="page-subtitle">
      Search, filter, and browse all posts from the nightdogs community
    </p>

    {% set totalPosts = collections.posts.length %}
    {% set totalWords = collections.posts | totalWordCount %}
    {% set allTags = collections.posts | getAllTags %}
    {% set uniqueAuthors = collections.posts | getUniqueAuthors %}
    {% set tagStats = collections.posts | getTagStats %}

    <div class="explore-stats">
      <div class="explore-stat">
        <span class="stat-number">{{ totalPosts }}</span>
        <p class="stat-label">Posts</p>
      </div>
      <div class="explore-stat">
        <span class="stat-number">{{ uniqueAuthors.length }}</span>
        <p class="stat-label">Authors</p>
      </div>
      <div class="explore-stat">
        <span class="stat-number">{{ allTags.length }}</span>
        <p class="stat-label">Tags</p>
      </div>
      <div class="explore-stat">
        <span class="stat-number">{{ (totalWords / 200) | round }}</span>
        <p class="stat-label">Min Read</p>
      </div>
    </div>
  </div>

  <!-- Archive Section -->
    <div class="section archive-section">
      <h2 class="section-title">üìö All Posts</h2>

    <div class="filters-section">
      <div class="filters-header">
        <h3>Filter & Search Posts</h3>
        <p style="margin: 0; color: var(--muted-color); font-size: 0.95rem;">
          Find exactly what you're looking for
        </p>
      </div>

      <div class="search-filter">
        <input type="text" id="post-search" class="search-input"
               placeholder="üîç Search posts by title, content, or author...">
      </div>

      <div class="filter-options">
        <div class="filter-group">
          <h4>üìÖ Filter by Tag</h4>
          <div class="filter-tags" id="filter-tags">
            <button class="filter-tag active" data-tag="all">All Posts</button>
            {% for tagInfo in tagStats %}
              {% set tagDesc = tagDescriptions.tags[tagInfo.tag] %}
              {% set tagColor = tagDesc.color if tagDesc and tagDesc.color else '#6c757d' %}
              <button class="filter-tag" data-tag="{{ tagInfo.tag }}"
                      style="border-color: {{ tagColor }};"
                      data-color="{{ tagColor }}">
                {% if tagDesc and tagDesc.icon %}{{ tagDesc.icon }} {% endif %}{{ tagInfo.tag }} ({{ tagInfo.count }})
              </button>
            {% endfor %}
          </div>
        </div>

        <div class="filter-group">
          <h4>üîÑ Sort Posts</h4>
          <div class="sort-options">
            <button class="sort-option active" data-sort="date-desc">Newest First</button>
            <button class="sort-option" data-sort="date-asc">Oldest First</button>
            <button class="sort-option" data-sort="title-asc">A-Z</button>
            <button class="sort-option" data-sort="author-asc">By Author</button>
          </div>
        </div>
      </div>
    </div>

    <div class="posts-section">
      <div class="posts-header">
        <div class="posts-count" id="posts-count">
          Showing {{ posts.length }} of {{ totalPosts }} posts
        </div>
      </div>

      <div class="posts-grid" id="posts-grid">
        {% for post in posts %}
          <a href="{{ post.url }}" class="post-card" data-tags="{{ post.data.tags | join(',') }}"
             data-author="{{ post.data.author }}" data-date="{{ post.date | date('YYYY-MM-DD') }}">
            <div class="post-card-header">
              <h3 class="post-card-title">
                {{ post.data.title }}
              </h3>
              <div class="post-card-meta">
                by {{ authors[post.data.author].name }} ‚Ä¢
                {{ post.date | readableDate('MMM dd, yyyy') }} ‚Ä¢
                {{ post.data.wordCount if post.data.wordCount else (post.templateContent | striptags | wordcount) }} words
              </div>
            </div>

            {% if post.data.description %}
              <p class="post-card-description">
                {{ post.data.description | striptags | truncate(150) }}
              </p>
            {% endif %}

            {% if post.data.tags %}
              <div class="post-card-tags">
                {% for tag in post.data.tags | head(4) %}
                  {% set tagDesc = tagDescriptions.tags[tag] %}
                  {% set tagColor = tagDesc.color if tagDesc and tagDesc.color else '#6c757d' %}
                  <span class="post-card-tag" style="background-color: {{ tagColor }};">
                    {% if tagDesc and tagDesc.icon %}{{ tagDesc.icon }} {% endif %}{{ tag }}
                  </span>
                {% endfor %}
              </div>
            {% endif %}
          </a>
        {% endfor %}
      </div>

      <!-- Pagination -->
      {% if pagination.href.previous or pagination.href.next %}
        <nav class="pagination">
          {% if pagination.href.previous %}
            <a href="{{ pagination.href.previous }}" class="pagination-link">‚Üê Previous</a>
          {% endif %}

          <span class="pagination-info">
            Page {{ pagination.pageNumber + 1 }} of {{ pagination.hrefs.length }}
          </span>

          {% if pagination.href.next %}
            <a href="{{ pagination.href.next }}" class="pagination-link">Next ‚Üí</a>
          {% endif %}
        </nav>
      {% endif %}
    </div>
  </div>
</div>

<script eleventy:ignore>
document.addEventListener('DOMContentLoaded', function() {
  // Filter and search functionality
  const searchInput = document.getElementById('post-search');
  const filterTags = document.querySelectorAll('.filter-tag');
  const sortOptions = document.querySelectorAll('.sort-option');
  const postsGrid = document.getElementById('posts-grid');
  const postsCount = document.getElementById('posts-count');
  const allPosts = Array.from(document.querySelectorAll('.post-card'));

  let currentFilter = 'all';
  let currentSort = 'date-desc';
  let searchQuery = '';

  function filterAndSortPosts() {
    let filteredPosts = allPosts.filter(post => {
      // Text search
      if (searchQuery) {
        const postText = (post.textContent || '').toLowerCase();
        if (!postText.includes(searchQuery.toLowerCase())) {
          return false;
        }
      }

      // Tag filter
      if (currentFilter !== 'all') {
        const postTags = post.dataset.tags ? post.dataset.tags.split(',') : [];
        if (!postTags.includes(currentFilter)) {
          return false;
        }
      }

      return true;
    });

    // Sort posts
    filteredPosts.sort((a, b) => {
      switch (currentSort) {
        case 'date-desc':
          return new Date(b.dataset.date) - new Date(a.dataset.date);
        case 'date-asc':
          return new Date(a.dataset.date) - new Date(b.dataset.date);
        case 'title-asc':
          return a.querySelector('.post-card-title').textContent.localeCompare(
            b.querySelector('.post-card-title').textContent
          );
        case 'author-asc':
          return a.dataset.author.localeCompare(b.dataset.author);
        default:
          return 0;
      }
    });

    // Update display
    allPosts.forEach(post => {
      post.style.display = 'none';
    });

    filteredPosts.forEach(post => {
      post.style.display = 'block';
    });

    // Update count
    postsCount.textContent = `Showing ${filteredPosts.length} of {{ totalPosts }} posts`;
  }

  // Search functionality
  searchInput.addEventListener('input', function() {
    searchQuery = this.value;
    filterAndSortPosts();
  });

  // Tag filtering with colors
  filterTags.forEach(tag => {
    tag.addEventListener('click', function() {
      filterTags.forEach(t => {
        t.classList.remove('active');
        t.style.backgroundColor = '';
        t.style.color = '';
      });

      this.classList.add('active');

      // Apply color for non-"all" tags
      if (this.dataset.tag !== 'all' && this.dataset.color) {
        this.style.backgroundColor = this.dataset.color;
        this.style.color = '#ffffff';
      }

      currentFilter = this.dataset.tag;
      filterAndSortPosts();
    });
  });

  // Sort functionality
  sortOptions.forEach(option => {
    option.addEventListener('click', function() {
      sortOptions.forEach(o => o.classList.remove('active'));
      this.classList.add('active');
      currentSort = this.dataset.sort;
      filterAndSortPosts();
    });
  });

  // Enhanced search input styling
  searchInput.addEventListener('focus', function() {
    this.style.borderColor = 'var(--color)';
    this.style.boxShadow = '0 0 0 3px rgba(0,0,0,0.1)';
  });

  searchInput.addEventListener('blur', function() {
    this.style.borderColor = 'var(--primary)';
    this.style.boxShadow = 'none';
  });

  // Analytics tracking
  if (window.analytics) {
    window.analytics.track('explore_page_view', {
      total_posts: {{ totalPosts }},
      total_tags: {{ allTags.length }},
      total_authors: {{ uniqueAuthors.length }}
    });
  }

  // Add smooth scrolling for internal links
  document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      const target = document.querySelector(this.getAttribute('href'));
      if (target) {
        target.scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      }
    });
  });
});
</script>
