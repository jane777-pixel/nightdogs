---
pagination:
  data: collections.all
  size: 1
  alias: tagData
  before: function(paginationData) {
    // Get all tags from all posts
    const allTags = new Set();

    paginationData.forEach(item => {
      if (item.data && item.data.tags) {
        item.data.tags.forEach(tag => {
          // Skip meta tags
          if (!['posts', 'blog', 'all'].includes(tag)) {
            allTags.add(tag);
          }
        });
      }
    });

    return Array.from(allTags).sort();
  }
permalink: "/tags/{{ tagData }}/"
eleventyComputed:
  title: "#{{ tagData }} - Tags"
layout: layouts/base.njk
---

<style>
.tag-page {
  max-width: 900px;
  margin: 0 auto;
  padding: 2rem 1rem;
}

.breadcrumb {
  margin-bottom: 2rem;
  font-size: 0.9rem;
  color: var(--muted-color);
}

.breadcrumb a {
  color: var(--primary);
  text-decoration: none;
}

.breadcrumb a:hover {
  text-decoration: underline;
}

.tag-header {
  text-align: center;
  margin-bottom: 3rem;
  padding: 2.5rem;
  background: var(--background-color);
  border: 2px solid var(--primary);
  border-radius: 12px;
  position: relative;
  overflow: hidden;
  box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

.tag-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, var(--primary), var(--color), var(--primary));
}

.tag-title {
  font-size: 3rem;
  margin: 0 0 1rem 0;
  color: var(--color);
  font-family: var(--font-family);
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.tag-icon {
  font-size: 2.5rem;
}

.tag-description {
  font-size: 1.2rem;
  color: var(--muted-color);
  margin: 1rem auto 0;
  max-width: 600px;
  line-height: 1.5;
}

.tag-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
  gap: 1rem;
  margin: 1.5rem 0;
  max-width: 500px;
  margin-left: auto;
  margin-right: auto;
}

.tag-stat {
  text-align: center;
  padding: 1rem;
  background: rgba(255,255,255,0.1);
  border-radius: 8px;
}

.stat-number {
  display: block;
  font-size: 1.8rem;
  font-weight: bold;
  color: var(--primary);
  margin-bottom: 0.25rem;
}

.stat-label {
  font-size: 0.9rem;
  opacity: 0.8;
}



.posts-section {
  margin-top: 3rem;
}

.section-title {
  font-size: 2rem;
  margin: 0 0 2rem 0;
  color: var(--color);
  text-align: center;
}

.tag-posts {
  display: grid;
  gap: 2rem;
}

.tag-post {
  padding: 2rem;
  border: 1px solid var(--primary);
  border-radius: 12px;
  transition: all 0.3s ease;
  background: var(--background-color);
}

.tag-post:hover {
  background: var(--primary);
  color: var(--background-color);
  transform: translateY(-3px);
  box-shadow: 0 8px 20px rgba(0,0,0,0.12);
}

.tag-post:hover * {
  color: inherit;
}

.post-title {
  margin: 0 0 1rem 0;
  font-size: 1.4rem;
}

.post-title a {
  color: inherit;
  text-decoration: none;
}

.post-meta {
  display: flex;
  gap: 1rem;
  font-size: 0.95rem;
  opacity: 0.8;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  align-items: center;
}

.author-link {
  color: inherit;
  text-decoration: none;
  font-weight: 500;
}

.author-link:hover {
  text-decoration: underline;
}

.post-tags {
  display: flex;
  gap: 0.5rem;
  flex-wrap: wrap;
  margin-top: 1rem;
}

.post-tag {
  background: var(--muted-color);
  color: var(--background-color);
  padding: 0.2rem 0.6rem;
  border-radius: 12px;
  font-size: 0.8rem;
  text-decoration: none;
  transition: all 0.2s ease;
}

.post-tag:hover {
  background: var(--color);
  transform: scale(1.05);
}

.post-tag.current-tag {
  background: var(--color);
  font-weight: bold;
}

.post-excerpt {
  line-height: 1.7;
  margin: 1rem 0 0 0;
}

.back-link {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 2rem;
  padding: 0.6rem 1.2rem;
  background: var(--primary);
  color: var(--background-color);
  text-decoration: none;
  border-radius: 8px;
  font-size: 0.95rem;
  font-weight: 500;
  transition: all 0.2s ease;
}

.back-link:hover {
  transform: translateY(-1px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.15);
}

.author-breakdown {
  margin-top: 2rem;
  text-align: center;
}

.author-breakdown h3 {
  margin: 0 0 1rem 0;
  color: var(--color);
}

.author-chips {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center;
}

.author-chip {
  display: inline-flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.4rem 0.8rem;
  background: var(--muted-color);
  color: var(--background-color);
  border-radius: 16px;
  font-size: 0.85rem;
  text-decoration: none;
  transition: all 0.2s ease;
}

.author-chip:hover {
  background: var(--primary);
  transform: scale(1.05);
}

.author-chip-count {
  background: rgba(255,255,255,0.3);
  padding: 0.1rem 0.4rem;
  border-radius: 8px;
  font-size: 0.75rem;
  font-weight: bold;
}

.related-tags {
  margin-top: 3rem;
  text-align: center;
  padding: 2rem;
  background: var(--background-color);
  border: 1px solid var(--primary);
  border-radius: 12px;
}

.related-tags h3 {
  margin: 0 0 1rem 0;
  color: var(--color);
}

.related-tags-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  justify-content: center;
  margin-top: 1rem;
}

@media (max-width: 768px) {
  .tag-page {
    padding: 1rem;
  }

  .tag-title {
    font-size: 2.5rem;
  }

  .tag-stats {
    grid-template-columns: repeat(2, 1fr);
  }

  .post-meta {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }

  .author-chips {
    justify-content: center;
  }
}
</style>

<div class="tag-page">
  <nav class="breadcrumb">
    <a href="/">nightdogs</a> ‚Üí
    <a href="/blog/">blog</a> ‚Üí
    <a href="/tags/">tags</a> ‚Üí
    <span>#{{ tagData }}</span>
  </nav>

  <a href="/blog/" class="back-link">
    ‚Üê Back to All Posts
  </a>

  {% set taggedPosts = collections.blog | filterByTag(tagData) %}
  {% set postCount = taggedPosts.length %}
  {% set totalWords = taggedPosts | totalWordCount %}
  {% set uniqueAuthors = taggedPosts | getUniqueAuthors %}

  <div class="tag-header">
    {% set tagInfo = tagDescriptions.tags[tagData] %}
    <h1 class="tag-title">
      {% if tagInfo and tagInfo.icon %}
        <span class="tag-icon">{{ tagInfo.icon }}</span>
      {% else %}
        <span class="tag-icon">üè∑Ô∏è</span>
      {% endif %}
      #{{ tagData }}
    </h1>

    {% if tagInfo and tagInfo.description %}
      <p class="tag-description">{{ tagInfo.description }}</p>
    {% else %}
      <p class="tag-description">Explore all posts tagged with #{{ tagData }}</p>
    {% endif %}

    <div class="tag-stats">
      <div class="tag-stat">
        <span class="stat-number">{{ postCount }}</span>
        <span class="stat-label">Posts</span>
      </div>
      <div class="tag-stat">
        <span class="stat-number">{{ uniqueAuthors.length }}</span>
        <span class="stat-label">Authors</span>
      </div>
      <div class="tag-stat">
        <span class="stat-number">{{ totalWords | numberFormat }}</span>
        <span class="stat-label">Words</span>
      </div>
      <div class="tag-stat">
        <span class="stat-number">{{ (totalWords / 200) | round }}</span>
        <span class="stat-label">Minutes</span>
      </div>
    </div>

    <div class="author-breakdown">
      <h3>üë• Authors writing about {{ tagData }}:</h3>
      <div class="author-chips">
        {% for authorKey in uniqueAuthors %}
          {% set authorPosts = taggedPosts | filterByAuthor(authorKey) %}
          <a href="/authors/{{ authorKey }}/" class="author-chip">
            <span>{{ authors[authorKey].name }}</span>
            <span class="author-chip-count">{{ authorPosts.length }}</span>
          </a>
        {% endfor %}
      </div>
    </div>
  </div>

  {% if postCount > 0 %}
    <div class="posts-section">
      <h2 class="section-title">Posts tagged with #{{ tagData }}</h2>

      <div class="tag-posts">
        {% for post in taggedPosts | reverse %}
          <article class="tag-post">
            <h3 class="post-title">
              <a href="{{ post.url }}">{{ post.data.title }}</a>
            </h3>
            <div class="post-meta">
              <span>üìÖ <time datetime="{{ post.date | isoDate }}">{{ post.date | readableDate }}</time></span>
              <span>‚úçÔ∏è <a href="/authors/{{ post.data.author }}/" class="author-link">{{ authors[post.data.author].name }}</a></span>
              {% if post.data.readingTime %}
                <span>‚è±Ô∏è {{ post.data.readingTime.text }}</span>
              {% endif %}
              {% if tagInfo and tagInfo.icon %}
                <span style="opacity: 0.7;">{{ tagInfo.icon }}</span>
              {% endif %}
            </div>

            {% if post.data.description %}
              <p class="post-excerpt">{{ post.data.description }}</p>
            {% endif %}

            {% if post.data.tags and post.data.tags.length > 1 %}
              <div class="post-tags">
                {% for tag in post.data.tags %}
                  {% if tag != "blog" and tag != "posts" %}
                    <a href="/tags/{{ tag }}/" class="post-tag{% if tag == tagData %} current-tag{% endif %}">
                      #{{ tag }}
                    </a>
                  {% endif %}
                {% endfor %}
              </div>
            {% endif %}
          </article>
        {% endfor %}
      </div>
    </div>

  {% else %}
    <div style="text-align: center; padding: 3rem; opacity: 0.7;">
      <h3>üöß No Posts Yet</h3>
      <p>No posts have been tagged with #{{ tagData }} yet.</p>
      <p style="margin-top: 1rem;">
        <a href="/blog/" style="color: var(--primary);">Browse all posts ‚Üí</a>
      </p>
    </div>
  {% endif %}

  {% if postCount > 0 %}
    <!-- Related Tags Section -->
    {% set relatedTags = collections.blog | getRelatedTags(tagData, 8) %}
    {% if relatedTags.length > 0 %}
      <div class="related-tags">
        <h3>üè∑Ô∏è Related Tags</h3>
        <p style="margin: 0 0 1rem 0; opacity: 0.8;">Tags that often appear together with #{{ tagData }}</p>
        <div class="related-tags-list">
          {% for relatedTag in relatedTags %}
            <a href="/tags/{{ relatedTag.tag }}/" class="post-tag">
              #{{ relatedTag.tag }} ({{ relatedTag.count }})
            </a>
          {% endfor %}
        </div>
      </div>
    {% endif %}
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Highlight current tag in all tag listings
  const currentTag = '{{ tagData }}';
  const tagLinks = document.querySelectorAll(`a[href="/tags/${currentTag}/"]`);

  tagLinks.forEach(link => {
    link.classList.add('current-tag');
  });

  // Apply custom tag color if available
  {% if tagInfo and tagInfo.color %}
    const tagHeader = document.querySelector('.tag-header');
    if (tagHeader) {
      tagHeader.style.borderColor = '{{ tagInfo.color }}';
      tagHeader.style.background = `linear-gradient(135deg, var(--background-color) 0%, {{ tagInfo.color }}10 100%)`;
    }

    // Update CSS custom properties for this tag's color
    document.documentElement.style.setProperty('--tag-color', '{{ tagInfo.color }}');

    // Style tag elements with custom color
    const tagElements = document.querySelectorAll('.current-tag, .stat-number');
    tagElements.forEach(el => {
      el.style.color = '{{ tagInfo.color }}';
    });
  {% endif %}

  // Add keyboard navigation for tag posts
  const posts = document.querySelectorAll('.tag-post');
  posts.forEach((post, index) => {
    post.setAttribute('tabindex', '0');

    post.addEventListener('keydown', function(e) {
      if (e.key === 'Enter') {
        const link = this.querySelector('.post-title a');
        if (link) link.click();
      }

      // Navigate between posts with arrow keys
      if (e.key === 'ArrowDown' && index < posts.length - 1) {
        e.preventDefault();
        posts[index + 1].focus();
      }

      if (e.key === 'ArrowUp' && index > 0) {
        e.preventDefault();
        posts[index - 1].focus();
      }
    });
  });

  // Add analytics tracking for tag page views
  if (window.analytics) {
    window.analytics.track('tag_page_view', {
      tag: currentTag,
      post_count: {{ postCount }},
      author_count: {{ uniqueAuthors.length }}
    });
  }
});
</script>
