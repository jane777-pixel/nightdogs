<!doctype html>
<html lang="{{ metadata.language }}"{% if author %} data-author="{{ author }}"{% endif %}>
	<head>
 <script>
        (function () {
const THEME_KEY = "author-theme";
const DEFAULT_THEME = "jane";
if (document.documentElement.dataset.author) return;
try {
const savedTheme = localStorage.getItem(THEME_KEY) || DEFAULT_THEME;
document.documentElement.setAttribute("data-author", savedTheme);
} catch (e) {
document.documentElement.setAttribute("data-author", DEFAULT_THEME);
}
        })();
        </script>
    <!-- <meta property="og:url" content="TODO" /> -->
    <!-- <meta property="og:logo" content="TODO" /> -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="{{ title }}" />
    <meta property="og:description" content="{{ description or metadata.description }}" />
    {% if image %}
        <meta property="og:image" content="{{ image | contentImgUrlFilter | absoluteUrl(metadata.url) }}" />
    {% endif %}
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
        <meta name="description" content="{{ description or metadata.description }}">
        <link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

        <!-- Inline theme script to prevent FOUC -->

        <!-- Load local fonts as a separate stylesheet -->
        <link rel="stylesheet" href="/css/fonts.css">

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<script>
  window.AUTHORS_DOG_PERSON = {
    {% for key, author in authors %}
      "{{ key }}": {{ author.isDogPerson | default(false) | dump }}{% if not loop.last %},{% endif %}
    {% endfor %}
  };
</script>

		{% css %}

{# --- 2. Root and author variables (before any CSS uses them) --- #}
	:root {
  	--font-family: "Bitcount Grid Single", "Segoe UI", "Roboto", "Helvetica Neue", Arial, "Liberation Sans", sans-serif;
   	--font-family-monospace: Consolas, Menlo, Monaco, Andale Mono WT, Andale Mono, Lucida Console, Lucida Sans Typewriter, DejaVu Sans Mono, Bitstream Vera Sans Mono, Liberation Mono, Nimbus Mono L, Courier New, Courier, monospace;
    --syntax-tab-size: 2;
  --background-color: #ffd6e0;
  --color: #8b0020;
  --primary: #b8002e;
  --muted-color: #6d0015;
  {%- for author, data in authors | dictsort %}
    /* Author: {{ author }} */
    --author-{{ author }}-background: {{ data.theme.light.background }};
    --author-{{ author }}-color: {{ data.theme.light.color }};
    --author-{{ author }}-primary: {{ data.theme.light.primary }};
    --author-{{ author }}-muted: {{ data.theme.light.muted }};
    --author-{{ author }}-font-body: {{ data.theme.fonts.body|default('inherit')|safe }};
    --author-{{ author }}-font-header: {{ data.theme.fonts.header|default('inherit')|safe }};
    {%- if data.theme.fonts.mono %}
    --author-{{ author }}-font-mono: {{ data.theme.fonts.mono|safe }};
    {%- endif %}
  {%- endfor %}
}
/* Dark mode support for each author */
{%- for author, data in authors | dictsort %}
[data-author="{{ author }}"][data-theme="dark"] {
  --author-{{ author }}-background: {{ data.theme.dark.background }};
  --author-{{ author }}-color: {{ data.theme.dark.color }};
  --author-{{ author }}-primary: {{ data.theme.dark.primary }};
  --author-{{ author }}-muted: {{ data.theme.dark.muted }};
}
{%- endfor %}

@media (prefers-color-scheme: dark) {
  :root {
    {%- for author, data in authors | dictsort %}
      /* Author: {{ author }} */
      --author-{{ author }}-background: {{ data.theme.dark.background }};
      --author-{{ author }}-color: {{ data.theme.dark.color }};
      --author-{{ author }}-primary: {{ data.theme.dark.primary }};
      --author-{{ author }}-muted: {{ data.theme.dark.muted }};
    {%- endfor %}
  }
}

{# --- 3. Pico and your main CSS (these will now use the variables above) --- #}
{% include "css/index.css" %}

/* Search functionality styles */
.search-overlay {
	display: none;
	position: fixed;
	top: 0;
	left: 0;
	width: 100vw;
	height: 100vh;
	background: rgba(0, 0, 0, 0.8);
	z-index: 10000;
	backdrop-filter: blur(4px);
}

.search-overlay.active {
	display: flex !important;
	align-items: flex-start;
	justify-content: center;
	padding-top: 10vh;
}

.search-modal {
	background: var(--background-color);
	border: 2px solid var(--primary);
	border-radius: 8px;
	width: 90%;
	max-width: 600px;
	max-height: 70vh;
	overflow: hidden;
	box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
}

.search-header {
	display: flex;
	align-items: center;
	padding: 1rem;
	border-bottom: 1px solid var(--primary);
}

#search-input {
	flex: 1;
	border: none;
	background: transparent;
	font-size: 1.2rem;
	color: var(--color);
	outline: none;
	font-family: var(--font-family);
}

#search-input::placeholder {
	color: var(--muted-color);
	opacity: 0.7;
}

.search-close {
	background: none;
	border: none;
	color: var(--color);
	cursor: pointer;
	padding: 0.5rem;
	display: flex;
	align-items: center;
	justify-content: center;
	border-radius: 4px;
}

.search-close:hover {
	background-color: var(--primary);
	color: var(--background-color);
}

.search-results {
	max-height: 400px;
	overflow-y: auto;
	padding: 0;
}

.search-result {
	padding: 1rem;
	border-bottom: 1px solid var(--muted-color);
	cursor: pointer;
	transition: background-color 0.2s ease;
}

.search-result:hover {
	background-color: var(--primary);
	color: var(--background-color);
}

.search-result:hover * {
	color: inherit;
}

.result-title {
	margin: 0 0 0.5rem 0;
	font-size: 1.1rem;
	font-family: var(--font-family);
}

.result-title a {
	color: inherit;
	text-decoration: none;
}

.result-meta {
	display: flex;
	gap: 1rem;
	align-items: center;
	font-size: 0.85rem;
	opacity: 0.8;
	margin-bottom: 0.5rem;
}

.search-footer {
	padding: 0.75rem 1rem;
	background: var(--muted-color);
	color: var(--background-color);
	font-size: 0.8rem;
	display: flex;
	gap: 1rem;
	align-items: center;
}

.search-footer kbd {
	background: rgba(255, 255, 255, 0.2);
	padding: 0.2rem 0.4rem;
	border-radius: 3px;
	font-family: monospace;
	font-size: 0.75rem;
}

.no-results {
	padding: 2rem;
	text-align: center;
	opacity: 0.7;
}

.search-overlay mark {
	background: var(--primary);
	color: var(--background-color);
	padding: 0.1rem 0.2rem;
	border-radius: 2px;
}

@media (max-width: 768px) {
	.search-modal {
		width: 95%;
		max-height: 80vh;
	}
	.search-overlay.active {
		padding-top: 5vh;
	}
}

{% endcss %}
<style>{% getBundle "css" %}</style>

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		<script type="module">{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}</script>

        <!-- IndieAuth endpoints -->
        <link rel="authorization_endpoint" href="https://indieauth.com/auth">
        <link rel="token_endpoint" href="https://tokens.indieauth.com/token">

        <!-- Identity verification -->
        <link rel="me" href="https://github.com/jane777-pixel">
        <link rel="me" href="mailto:haileebach@gmail.com">
		<link rel="me" href="mailto:orionlw@pm.me">
		<link rel="me" href="https://github.com/orionlw">

        <!-- Webmention endpoints -->
        <link rel="webmention" href="https://webmention.io/nightdogs.xyz/webmention">
        <link rel="pingback" href="https://webmention.io/nightdogs.xyz/xmlrpc">
    </head>
    <body class="h-card" {% if layout == "layouts/post.njk" %}data-is-post="true"{% endif %}>
        <div class="site-wrapper">
        <a href="#main" id="skip-link" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link p-name u-url">nightdogs</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
					<li class="nav-item">
						<button data-search-trigger style="background:none;border:none;color:var(--color);cursor:pointer;padding:0.5rem;border-radius:4px;" aria-label="Search posts">
							üîç Search
						</button>
					</li>
					<li class="nav-item">
						<div style="display:flex;align-items:center;gap:0.5em;">
							<button id="dark-mode-toggle" style="background:none;border:none;color:var(--color);cursor:pointer;padding:0.25rem;border-radius:4px;font-size:1.2em;" aria-label="Toggle dark mode">
								üåô
							</button>
							<select id="author-select" class="author-sync" name="author-select" style="background:none;border:1px solid var(--color);color:var(--color);min-width:6em;font-size:0.92em;padding:0.25em 0.5em;border-radius:4px;">
								<option value="jane">Jane</option>
								<option value="orionlw">Orion</option>
								<option value="adesse">Ad√®sse</option>
								<option value="nic">Nic</option>
								<option value="amelia">Amelia</option>
								<option value="abby">Abby</option>
								<option value="ewan">Ewan</option>
							</select>
						</div>
					</li>
				</ul>
			</nav>
		</header>

		<main id="main" class="main-content">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer class="p-note footer-site">
  <p>
    <em>Built with <a href="https://www.11ty.dev/">Eleventy v3.1.2</a></em>
  </p>
</footer>
        </div>
		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>

		<!-- Load search functionality -->
		<script src="/js/search.js" defer></script>

        <!-- Dark mode functionality -->
        <script eleventy:ignore>
        document.addEventListener('DOMContentLoaded', function() {
          const toggle = document.getElementById('dark-mode-toggle');
          if (!toggle) return;

          let isDark = false;
          try {
            const saved = localStorage.getItem('nightdogs-dark-mode');
            isDark = saved === 'true' || (!saved && window.matchMedia('(prefers-color-scheme: dark)').matches);
          } catch(e) {}

          function updateToggle() {
            toggle.innerHTML = isDark ? '‚òÄÔ∏è' : 'üåô';
            document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');
            try { localStorage.setItem('nightdogs-dark-mode', isDark); } catch(e) {}
          }

          toggle.addEventListener('click', function() {
            isDark = !isDark;
            updateToggle();
          });

          updateToggle();
        });
        </script>

        <script>
        // Sync all author selectors and theme
        (function() {
          const authorSelectors = document.querySelectorAll('.author-sync');
          const siteWrapper = document.querySelector('.site-wrapper');
          const html = document.documentElement;

          function setThemeByAuthor(author) {
            document.body.classList.remove(...Array.from(document.body.classList).filter(c => c.startsWith('author-selected-')));
            if (author && author !== "all") {
              document.body.classList.add(`author-selected-${author}`);
              document.body.setAttribute('data-author', author);
              if (siteWrapper) siteWrapper.setAttribute('data-author', author);
              html.setAttribute('data-author', author);
              try { localStorage.setItem('author-theme', author); } catch(e){}
            } else {
              document.body.setAttribute('data-author', 'jane');
              if (siteWrapper) siteWrapper.setAttribute('data-author', 'jane');
              html.setAttribute('data-author', 'jane');
              try { localStorage.setItem('author-theme', 'jane'); } catch(e){}
            }
          }

          function syncAuthorSelectors(author) {
            authorSelectors.forEach(sel => {
              if (sel.value !== author) sel.value = author;
            });
            setThemeByAuthor(author);
            // If on blog archive, trigger post filtering
            if (typeof filterPosts === "function") filterPosts();
          }

          authorSelectors.forEach(sel => {
            sel.addEventListener('change', function() {
              syncAuthorSelectors(this.value);
            });
          });

          // On page load, sync selectors to localStorage or default
          let initialAuthor = "jane";
          try {
            const saved = localStorage.getItem('author-theme');
            if (saved) initialAuthor = saved;
          } catch(e){}
          syncAuthorSelectors(initialAuthor);
        })();
        </script>
        <script>
        function updateCatNavText() {
          const author = document.documentElement.getAttribute('data-author');
          // Find the nav link for the Cat page (assumes href contains 'cat')
          const navLinks = document.querySelectorAll('.nav-item a');
          navLinks.forEach(link => {
            if (link.getAttribute('href') && link.getAttribute('href').includes('cat')) {
            link.textContent = window.AUTHORS_DOG_PERSON?.[author] === true ? 'Dog' : 'Cat';
            }
          });
        }

        // Run on page load
        updateCatNavText();

        // Listen for author changes
        const navObserver = new MutationObserver(updateCatNavText);
        navObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['data-author'] });
        </script>

    </body>
</html>
