<!doctype html>
<html lang="{{ metadata.language }}"{% if author %} data-author="{{ author }}"{% endif %}>
	<head>
 <script>
        (function () {
const THEME_KEY = "author-theme";
const DEFAULT_THEME = "jane";
if (document.documentElement.dataset.author) return;
try {
const savedTheme = localStorage.getItem(THEME_KEY) || DEFAULT_THEME;
document.documentElement.setAttribute("data-author", savedTheme);
} catch (e) {
document.documentElement.setAttribute("data-author", DEFAULT_THEME);
}
        })();
        </script>
    <!-- <meta property="og:url" content="TODO" /> -->
    <!-- <meta property="og:logo" content="TODO" /> -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="{{ title }}" />
    <meta property="og:description" content="{{ description or metadata.description }}" />
    {% if image %}
        <meta property="og:image" content="{{ image | contentImgUrlFilter | absoluteUrl(metadata.url) }}" />
    {% endif %}
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>{{ title or metadata.title }}</title>
        <meta name="description" content="{{ description or metadata.description }}">
        <link rel="alternate" href="/feed/feed.xml" type="application/atom+xml" title="{{ metadata.title }}">

        <!-- Inline theme script to prevent FOUC -->

        <!-- Load local fonts as a separate stylesheet -->
        <link rel="stylesheet" href="/css/fonts.css">

		{#- Render the CSS bundle using inlined CSS (for the fastest site performance in production) #}
		<script>
  window.AUTHORS_DOG_PERSON = {
    {% for key, author in authors %}
      "{{ key }}": {{ author.isDogPerson | default(false) | dump }}{% if not loop.last %},{% endif %}
    {% endfor %}
  };
</script>

		{% css %}

{# --- 2. Root and author variables (before any CSS uses them) --- #}
	:root {
  	--font-family: "Bitcount Grid Single", "Segoe UI", "Roboto", "Helvetica Neue", Arial, "Liberation Sans", sans-serif;
   	--font-family-monospace: Consolas, Menlo, Monaco, Andale Mono WT, Andale Mono, Lucida Console, Lucida Sans Typewriter, DejaVu Sans Mono, Bitstream Vera Sans Mono, Liberation Mono, Nimbus Mono L, Courier New, Courier, monospace;
    --syntax-tab-size: 2;
  --background-color: #ffd6e0;
  --color: #8b0020;
  --primary: #b8002e;
  --muted-color: #6d0015;
  {%- for author, data in authors | dictsort %}
    /* Author: {{ author }} */
    --author-{{ author }}-background: {{ data.theme.light.background }};
    --author-{{ author }}-color: {{ data.theme.light.color }};
    --author-{{ author }}-primary: {{ data.theme.light.primary }};
    --author-{{ author }}-muted: {{ data.theme.light.muted }};
    --author-{{ author }}-font-body: {{ data.theme.fonts.body|default('inherit')|safe }};
    --author-{{ author }}-font-header: {{ data.theme.fonts.header|default('inherit')|safe }};
    {%- if data.theme.fonts.mono %}
    --author-{{ author }}-font-mono: {{ data.theme.fonts.mono|safe }};
    {%- endif %}
  {%- endfor %}
}
@media (prefers-color-scheme: dark) {
  :root {
    {%- for author, data in authors | dictsort %}
      /* Author: {{ author }} */
      --author-{{ author }}-background: {{ data.theme.dark.background }};
      --author-{{ author }}-color: {{ data.theme.dark.color }};
      --author-{{ author }}-primary: {{ data.theme.dark.primary }};
      --author-{{ author }}-muted: {{ data.theme.dark.muted }};
    {%- endfor %}
  }
}

{# --- 3. Pico and your main CSS (these will now use the variables above) --- #}
{% include "css/index.css" %}
{% endcss %}
<style>{% getBundle "css" %}</style>

		{#- Add the heading-anchors web component to the JavaScript bundle #}
		<script type="module">{% include "node_modules/@zachleat/heading-anchors/heading-anchors.js" %}</script>

        <!-- IndieAuth endpoints -->
        <link rel="authorization_endpoint" href="https://indieauth.com/auth">
        <link rel="token_endpoint" href="https://tokens.indieauth.com/token">

        <!-- Identity verification -->
        <link rel="me" href="https://github.com/jane777-pixel">
        <link rel="me" href="mailto:haileebach@gmail.com">
		<link rel="me" href="mailto:orionlw@pm.me">
		<link rel="me" href="https://github.com/orionlw">

        <!-- Webmention endpoints -->
        <link rel="webmention" href="https://webmention.io/nightdogs.xyz/webmention">
        <link rel="pingback" href="https://webmention.io/nightdogs.xyz/xmlrpc">
    </head>
    <body class="h-card" {% if layout == "layouts/post.njk" %}data-is-post="true"{% endif %}>
        <div class="site-wrapper">
        <a href="#main" id="skip-link" class="visually-hidden">Skip to main content</a>

		<header>
			<a href="/" class="home-link p-name u-url">nightdogs</a>

			{#- Read more about `eleventy-navigation` at https://www.11ty.dev/docs/plugins/navigation/ #}
			<nav>
				<h2 class="visually-hidden">Top level navigation menu</h2>
				<ul class="nav">
				{%- for entry in collections.all | eleventyNavigation %}
					<li class="nav-item"><a href="{{ entry.url }}"{% if entry.url == page.url %} aria-current="page"{% endif %}>{{ entry.title }}</a></li>
				{%- endfor %}
				</ul>
			</nav>
		</header>

		<main id="main" class="main-content">
			<heading-anchors>
				{{ content | safe }}
			</heading-anchors>
		</main>

		<footer class="p-note footer-site">
  <p>
    <em>Built with <a href="https://www.11ty.dev/">Eleventy v3.1.2</a></em>
  </p>
  <div style="display:flex;align-items:center;justify-content:flex-end;margin-top:0.5em;">
    <div class="author-theme-selector" style="display:flex;align-items:center;gap:0.25em;font-size:0.92em;opacity:0.7;">
      <span style="font-size:1em;opacity:0.5;" aria-hidden="true">ðŸŽ¨</span>
      <select id="author-select" class="author-sync" name="author-select" style="min-width:6em;font-size:0.92em;padding:0.1em 0.7em;border-radius:0.7em;">
        <option value="jane">Jane</option>
        <option value="orionlw">Orion</option>
        <option value="adesse">AdÃ¨sse</option>
        <option value="nic">Nic</option>
        <option value="amelia">Amelia</option>
        <option value="abby">Abby</option>
        <option value="ewan">Ewan</option>
      </select>
    </div>
  </div>
</footer>
        </div>
		<!-- This page `{{ page.url }}` was built on {% currentBuildDate %} -->
		<script type="module" src="{% getBundleFileUrl "js" %}"></script>
        <script>
        // Sync all author selectors and theme
        (function() {
          const authorSelectors = document.querySelectorAll('.author-sync');
          const siteWrapper = document.querySelector('.site-wrapper');
          const html = document.documentElement;

          function setThemeByAuthor(author) {
            document.body.classList.remove(...Array.from(document.body.classList).filter(c => c.startsWith('author-selected-')));
            if (author && author !== "all") {
              document.body.classList.add(`author-selected-${author}`);
              document.body.setAttribute('data-author', author);
              if (siteWrapper) siteWrapper.setAttribute('data-author', author);
              html.setAttribute('data-author', author);
              try { localStorage.setItem('author-theme', author); } catch(e){}
            } else {
              document.body.setAttribute('data-author', 'jane');
              if (siteWrapper) siteWrapper.setAttribute('data-author', 'jane');
              html.setAttribute('data-author', 'jane');
              try { localStorage.setItem('author-theme', 'jane'); } catch(e){}
            }
          }

          function syncAuthorSelectors(author) {
            authorSelectors.forEach(sel => {
              if (sel.value !== author) sel.value = author;
            });
            setThemeByAuthor(author);
            // If on blog archive, trigger post filtering
            if (typeof filterPosts === "function") filterPosts();
          }

          authorSelectors.forEach(sel => {
            sel.addEventListener('change', function() {
              syncAuthorSelectors(this.value);
            });
          });

          // On page load, sync selectors to localStorage or default
          let initialAuthor = "jane";
          try {
            const saved = localStorage.getItem('author-theme');
            if (saved) initialAuthor = saved;
          } catch(e){}
          syncAuthorSelectors(initialAuthor);
        })();
        </script>
        <script>
        function updateCatNavText() {
          const author = document.documentElement.getAttribute('data-author');
          // Find the nav link for the Cat page (assumes href contains 'cat')
          const navLinks = document.querySelectorAll('.nav-item a');
          navLinks.forEach(link => {
            if (link.getAttribute('href') && link.getAttribute('href').includes('cat')) {
            link.textContent = window.AUTHORS_DOG_PERSON?.[author] === true ? 'Dog' : 'Cat';
            }
          });
        }

        // Run on page load
        updateCatNavText();

        // Listen for author changes
        const navObserver = new MutationObserver(updateCatNavText);
        navObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['data-author'] });
        </script>

    </body>
</html>
